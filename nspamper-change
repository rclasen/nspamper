#!/usr/bin/perl -w

#
# Copyright (c) 2008 Rainer Clasen
#
# This program is free software; you can redistribute it and/or modify
# it under the terms described in the file LICENSE included in this
# distribution.
#

=head1 NAME

nspamper-change - client to inform nspamper of IP change

=head1 SYNOPSIS

 nspamper-change [options] <address1> [<address2>]

=head1 DESCRIPTION

This is a tiny client telling the nspamper daemon the IP address it has to
set the name to. When nspamper isn't running, the statusfile is updated so
that it picks up the ip on next start.

=head1 OPTIONS

=over 4

=item B<--link>=I<name>

update names with this link tag in nspamper config 

=item B<--config>=I<config>

Nspamper config file. See L<nspamper> for the description.

=item B<--help>

Displays short usage info.

=item B<--pidfile>=I<pidfile-path>

Pidfile of nspamper.

=item B<--socketpath>=I<socket-path>

Unix socket nspamper is listening to.

=item B<--statuspath>=I<status-path>

Files with status information of nspamper: link.type

=back

=cut

use strict;
use Socket;
use Getopt::Long;
use NetAddr::IP;

my $prog = 'nspamper';

my $wanthelp;
my $needhelp;

sub needhelp {
	print STDERR "@_\n";
	++$needhelp;
}

my $conf = "/etc/$prog.conf";
my $ostatuspath = "/var/lib/$prog";
my $osocketpath = "/var/run/$prog.sock";
my $opidfile = "/var/run/$prog.pid";
my $link = 'default';

GetOptions(
	"config=s"	=> \$conf,
	"help|h!"	=> \$wanthelp,
	"pidfile=s"	=> \$opidfile,
	"socketpath=s"	=> \$osocketpath,
	"statuspath=s"	=> \$ostatuspath,
	"link=s"	=> \$link,
) || ++$needhelp;

my %rr;

if( @ARGV < 1 ){
	needhelp "missing arguments";

} elsif( @ARGV > 2 ){
	needhelp "too many arguments";

} else {
	foreach my $a ( @ARGV ){
		if( $a eq 'no4' ){
			exists $rr{A}
				and needhelp "need addresses of different protocols";

			$rr{A} = '';

		} elsif( $a eq 'no6' ){
			exists $rr{AAAA}
				and needhelp "need addresses of different protocols";

			$rr{AAAA} = '';

		} elsif( my $na = eval { NetAddr::IP->new($a) } ){
			$na->masklen == $na->bits
				or needhelp "no host address: $a";

			my $rr = $na->version == 4 ? 'A' : 'AAAA';

			exists $rr{$rr}
				and needhelp "need addresses of different protocols";

			$rr{$rr} = $na->addr;

		} else {
			needhelp "invalid address: $a";
		}
	}
}

if( $wanthelp ){
	print <<EOF;
usage: $0 [<opt>] <ip>
propagates IP address change to nspamper daemon.

options:
 --config=<conf>      config file
 --help|-h            this info
 --pidfile=<file>     nspamper pidfile
 --socketpath=<sock>  nspamper unix socket
 --statuspath=<dif>   nspamper status path
EOF
	exit 0;
}

if( $needhelp ){
	print STDERR "use --help for usage info\n";
	exit 1;
}

# read config
our( $statuspath, $socketpath, $pidfile, $name, $key );
if( -r $conf ){
	do $conf;
}

# set defaults / cmdline
$statuspath ||= $ostatuspath;
$socketpath ||= $osocketpath;
$pidfile ||= $opidfile;

&send_update || &write_status;

# send ip to running nspamper
sub send_update {
	unless( socket( SOCK, PF_UNIX, SOCK_STREAM, 0 ) ){
		print STDERR "socket failed: $!\n";
		return;
	}

	unless( connect( SOCK, sockaddr_un( $socketpath )) ){
		print STDERR "connect failed: $!\n";
		return;
	}

	foreach my $t ( sort keys %rr ){
		unless( print SOCK "$link $t $rr{$t}\n" ){
			print STDERR "write failed: $!\n";
			return;
		}
	}

	unless( close SOCK ){
		print STDERR "close failed: $!\n";
		return;
	}

	return 1;
}

# nspampr not running? -> fall back to $statefile
# TODO: this doesn't work when nspamper started between send_ip and write_ip
# TODO; use locking for statuspath, instead

sub write_status {
	if( open( my $pf, '<', $pidfile )){
		my $pid = <$pf>;
		if( $pid =~ /^\s*\d+\s*$/ && kill( 0, $pid )){
			print STDERR "failed to update statusfile as nspamper runs\n";
			return;
		}
		close($pf);
	}

	my $fail;

	foreach my $t ( sort keys %rr ){
		&write_file( $link, $t, $rr{$t} )
			or ++$fail;
	}

	return !$fail;
}

sub write_file {
	my( $link, $type, $data ) = @_;

	my $fn = "$statuspath/$link.$type";

	if( open( my $sf, '>', $fn )){
		print $sf "$data\n";
		close($sf);
		return 1;
	}

	print STDERR "failed to update statusfile $fn: $!\n";
	return;
}


=head1 BUGS

I bet there are some.

=head1 AUTHOR

Rainer Clasen E<lt>rc@zuto.deE<gt>

=head1 SEE ALSO

L<nspamper>.

=cut

