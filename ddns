#!/usr/bin/perl -w

#
# Copyright (c) 2008 Rainer Clasen
#
# This program is free software; you can redistribute it and/or modify
# it under the terms described in the file LICENSE included in this
# distribution.
#

use warnings;
use strict;
use Getopt::Long;
use Data::Dumper;
use File::Copy;

my $kdir = "/etc/bind/keys";
my $conf = "/etc/bind/ddns.conf";
my $ndc = "/etc/bind/ddns-keys.conf";
#my $domain = "dyn.example.com";

# TODO manpage

my $needhelp;
my $wanthelp;

if( ! GetOptions(
	"help|h!"	=> \$wanthelp,
	# TODO: conf
	# TODO: output file locations
)){
	$needhelp++;
}

my $cmd = shift;
if( ! defined $cmd or $cmd !~ /^(host|gen)$/ ){
	print STDERR "invalid command\n";
	$needhelp++;
}

if( $wanthelp ){
	print <<EOF;
$0 [opt] <cmd> [args]
Options: TODO
 --help                      this help
Commands:
 host <hostname>             add new dyndns hostnam
 gen                         regenerate named config
EOF
	exit 0;
}

if( $needhelp ){
	print STDERR "use --help for usage info\n";
	exit 1;
}


my $dat = do $conf
	or die "cannot read config";

#$dat = {
#	"host.dyn.example.org"	=> {
#		key => "blah",
#		user => "alice",
#	},
#};

if( $cmd eq "host" ){
	my( $host ) = lc shift;

#	if( $host !~ /^[a-z][a-z0-9-]*\.$domain$/ ){
#		die "invalid hostname";
#	}

	chdir $kdir || die "cannot change to key directory: $!";

	if( ! &keyfile( $host ) ){
		print "generating new key\n";
		system( "/usr/sbin/dnssec-keygen  -a HMAC-MD5 -b 512 -n USER $host") == 0
			or die "keygen failed";
	}

	my $key;
	my $kf = &keyfile( $host );
	open( my $fh, '<', $kf )
		or die "cannot open keyfile: $!";
	while(<$fh>){
		if( /^Key: (.*)/ ){
			$key = $1;
		}
	}
	close($fh);

	if( ! $key ){
		die "key not found in keyfile";
	}

	$dat->{$host}{key} = $key;
	$dat->{$host}{user} ||= '';

} elsif( $cmd eq "gen" ){
	# nothing to do
}

umask( 0027 );

# save config
unlink( "$conf.old");
copy( $conf, "$conf.old" )
	or die "failed to backup config: $!";
open(my $cfh, '>', $conf )
	or die "cannot write config: $!";
print $cfh Dumper( $dat );
close( $cfh );

# generate named.conf
open(my $nfh, '>', $ndc )
	or die "cannot write named config: $!";
foreach my $host ( keys %$dat ){
	my $e = $dat->{$host};
	print $nfh <<EOF;
key $host. {
	algorithm hmac-md5;
	secret "$e->{key}";
};

EOF
}
close($nfh);

sub keyfile {
	my( $host ) = @_;
	opendir( my $k, "." ) or die "cannot read key directory: $!";
	my @f = grep { /^K$host\.\+\d+\+\d+\.private$/ } readdir($k);
	closedir $k;
	return $f[0];
}


